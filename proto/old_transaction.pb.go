// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: old_transaction.proto

// NOTE: This file contains the old transaction format used before the migration.
// It is used for backward compatibility with existing data.
// IT can be removed after the migration is complete and all old transactions are migrated.

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionState int32

const (
	TransactionState_SENT_TO_BTC                TransactionState = 0
	TransactionState_CONFIRMED_ON_BTC           TransactionState = 1
	TransactionState_SENT_TO_BABYLON            TransactionState = 2
	TransactionState_VERIFIED                   TransactionState = 3
	TransactionState_DELEGATION_ACTIVE          TransactionState = 4
	TransactionState_UNBONDING_CONFIRMED_ON_BTC TransactionState = 5
	TransactionState_SPENT_ON_BTC               TransactionState = 6
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "SENT_TO_BTC",
		1: "CONFIRMED_ON_BTC",
		2: "SENT_TO_BABYLON",
		3: "VERIFIED",
		4: "DELEGATION_ACTIVE",
		5: "UNBONDING_CONFIRMED_ON_BTC",
		6: "SPENT_ON_BTC",
	}
	TransactionState_value = map[string]int32{
		"SENT_TO_BTC":                0,
		"CONFIRMED_ON_BTC":           1,
		"SENT_TO_BABYLON":            2,
		"VERIFIED":                   3,
		"DELEGATION_ACTIVE":          4,
		"UNBONDING_CONFIRMED_ON_BTC": 5,
		"SPENT_ON_BTC":               6,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_old_transaction_proto_enumTypes[0].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_old_transaction_proto_enumTypes[0]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{0}
}

type WatchedTxData struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SlashingTransaction    []byte                 `protobuf:"bytes,1,opt,name=slashing_transaction,json=slashingTransaction,proto3" json:"slashing_transaction,omitempty"`
	SlashingTransactionSig []byte                 `protobuf:"bytes,2,opt,name=slashing_transaction_sig,json=slashingTransactionSig,proto3" json:"slashing_transaction_sig,omitempty"`
	StakerBabylonAddr      string                 `protobuf:"bytes,3,opt,name=staker_babylon_addr,json=stakerBabylonAddr,proto3" json:"staker_babylon_addr,omitempty"`
	StakerBtcPk            []byte                 `protobuf:"bytes,4,opt,name=staker_btc_pk,json=stakerBtcPk,proto3" json:"staker_btc_pk,omitempty"`
	// TODO: Consider improving data model as currently for watched transactions
	// unbonding_transaction and unbonding_time are duplicated with UnbondingTxData
	// which is stored in TrackedTransaction
	UnbondingTransaction            []byte `protobuf:"bytes,5,opt,name=unbonding_transaction,json=unbondingTransaction,proto3" json:"unbonding_transaction,omitempty"`
	SlashingUnbondingTransaction    []byte `protobuf:"bytes,6,opt,name=slashing_unbonding_transaction,json=slashingUnbondingTransaction,proto3" json:"slashing_unbonding_transaction,omitempty"`
	SlashingUnbondingTransactionSig []byte `protobuf:"bytes,7,opt,name=slashing_unbonding_transaction_sig,json=slashingUnbondingTransactionSig,proto3" json:"slashing_unbonding_transaction_sig,omitempty"`
	UnbondingTime                   uint32 `protobuf:"varint,8,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *WatchedTxData) Reset() {
	*x = WatchedTxData{}
	mi := &file_old_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchedTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedTxData) ProtoMessage() {}

func (x *WatchedTxData) ProtoReflect() protoreflect.Message {
	mi := &file_old_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchedTxData.ProtoReflect.Descriptor instead.
func (*WatchedTxData) Descriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *WatchedTxData) GetSlashingTransaction() []byte {
	if x != nil {
		return x.SlashingTransaction
	}
	return nil
}

func (x *WatchedTxData) GetSlashingTransactionSig() []byte {
	if x != nil {
		return x.SlashingTransactionSig
	}
	return nil
}

func (x *WatchedTxData) GetStakerBabylonAddr() string {
	if x != nil {
		return x.StakerBabylonAddr
	}
	return ""
}

func (x *WatchedTxData) GetStakerBtcPk() []byte {
	if x != nil {
		return x.StakerBtcPk
	}
	return nil
}

func (x *WatchedTxData) GetUnbondingTransaction() []byte {
	if x != nil {
		return x.UnbondingTransaction
	}
	return nil
}

func (x *WatchedTxData) GetSlashingUnbondingTransaction() []byte {
	if x != nil {
		return x.SlashingUnbondingTransaction
	}
	return nil
}

func (x *WatchedTxData) GetSlashingUnbondingTransactionSig() []byte {
	if x != nil {
		return x.SlashingUnbondingTransactionSig
	}
	return nil
}

func (x *WatchedTxData) GetUnbondingTime() uint32 {
	if x != nil {
		return x.UnbondingTime
	}
	return 0
}

// Contains information about btc confirmation
type BTCConfirmationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight   uint32                 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash     []byte                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BTCConfirmationInfo) Reset() {
	*x = BTCConfirmationInfo{}
	mi := &file_old_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BTCConfirmationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCConfirmationInfo) ProtoMessage() {}

func (x *BTCConfirmationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_old_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCConfirmationInfo.ProtoReflect.Descriptor instead.
func (*BTCConfirmationInfo) Descriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *BTCConfirmationInfo) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BTCConfirmationInfo) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type CovenantSig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CovenantSig      []byte                 `protobuf:"bytes,1,opt,name=covenant_sig,json=covenantSig,proto3" json:"covenant_sig,omitempty"`
	CovenantSigBtcPk []byte                 `protobuf:"bytes,2,opt,name=covenant_sig_btc_pk,json=covenantSigBtcPk,proto3" json:"covenant_sig_btc_pk,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CovenantSig) Reset() {
	*x = CovenantSig{}
	mi := &file_old_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CovenantSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CovenantSig) ProtoMessage() {}

func (x *CovenantSig) ProtoReflect() protoreflect.Message {
	mi := &file_old_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CovenantSig.ProtoReflect.Descriptor instead.
func (*CovenantSig) Descriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *CovenantSig) GetCovenantSig() []byte {
	if x != nil {
		return x.CovenantSig
	}
	return nil
}

func (x *CovenantSig) GetCovenantSigBtcPk() []byte {
	if x != nil {
		return x.CovenantSigBtcPk
	}
	return nil
}

type UnbondingTxData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UnbondingTransaction []byte                 `protobuf:"bytes,1,opt,name=unbonding_transaction,json=unbondingTransaction,proto3" json:"unbonding_transaction,omitempty"`
	UnbondingTime        uint32                 `protobuf:"varint,2,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	CovenantSignatures   []*CovenantSig         `protobuf:"bytes,3,rep,name=covenant_signatures,json=covenantSignatures,proto3" json:"covenant_signatures,omitempty"`
	// this data is only filed if tracked transactions state is >= UNBONDING_CONFIRMED_ON_BTC,
	// and it is filled as last piece of information in unbonding process
	UnbondingTxBtcConfirmationInfo *BTCConfirmationInfo `protobuf:"bytes,4,opt,name=unbonding_tx_btc_confirmation_info,json=unbondingTxBtcConfirmationInfo,proto3" json:"unbonding_tx_btc_confirmation_info,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UnbondingTxData) Reset() {
	*x = UnbondingTxData{}
	mi := &file_old_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbondingTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondingTxData) ProtoMessage() {}

func (x *UnbondingTxData) ProtoReflect() protoreflect.Message {
	mi := &file_old_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondingTxData.ProtoReflect.Descriptor instead.
func (*UnbondingTxData) Descriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *UnbondingTxData) GetUnbondingTransaction() []byte {
	if x != nil {
		return x.UnbondingTransaction
	}
	return nil
}

func (x *UnbondingTxData) GetUnbondingTime() uint32 {
	if x != nil {
		return x.UnbondingTime
	}
	return 0
}

func (x *UnbondingTxData) GetCovenantSignatures() []*CovenantSig {
	if x != nil {
		return x.CovenantSignatures
	}
	return nil
}

func (x *UnbondingTxData) GetUnbondingTxBtcConfirmationInfo() *BTCConfirmationInfo {
	if x != nil {
		return x.UnbondingTxBtcConfirmationInfo
	}
	return nil
}

type OldTrackedTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// index of tracked transaction in database, first tracked transaction has index 1
	TrackedTransactionIdx uint64 `protobuf:"varint,1,opt,name=tracked_transaction_idx,json=trackedTransactionIdx,proto3" json:"tracked_transaction_idx,omitempty"`
	StakingTransaction    []byte `protobuf:"bytes,2,opt,name=staking_transaction,json=stakingTransaction,proto3" json:"staking_transaction,omitempty"`
	StakingOutputIdx      uint32 `protobuf:"varint,3,opt,name=staking_output_idx,json=stakingOutputIdx,proto3" json:"staking_output_idx,omitempty"`
	// address to retrive private key from connected wallet
	StakerAddress string `protobuf:"bytes,4,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	// time lock on staking transaction
	StakingTime uint32 `protobuf:"varint,5,opt,name=staking_time,json=stakingTime,proto3" json:"staking_time,omitempty"`
	// Public keys of finality providers to which we delegated
	FinalityProvidersBtcPks [][]byte `protobuf:"bytes,6,rep,name=finality_providers_btc_pks,json=finalityProvidersBtcPks,proto3" json:"finality_providers_btc_pks,omitempty"`
	// this data is only filed if tracked transactions state is >= CONFIRMED_ON_BTC
	StakingTxBtcConfirmationInfo *BTCConfirmationInfo `protobuf:"bytes,7,opt,name=staking_tx_btc_confirmation_info,json=stakingTxBtcConfirmationInfo,proto3" json:"staking_tx_btc_confirmation_info,omitempty"`
	BtcSigType                   uint32               `protobuf:"varint,8,opt,name=btc_sig_type,json=btcSigType,proto3" json:"btc_sig_type,omitempty"`
	BtcSigOverBbnStakerAddr      []byte               `protobuf:"bytes,9,opt,name=btc_sig_over_bbn_staker_addr,json=btcSigOverBbnStakerAddr,proto3" json:"btc_sig_over_bbn_staker_addr,omitempty"`
	State                        TransactionState     `protobuf:"varint,10,opt,name=state,proto3,enum=proto.TransactionState" json:"state,omitempty"`
	Watched                      bool                 `protobuf:"varint,11,opt,name=watched,proto3" json:"watched,omitempty"`
	// this data is only filled if tracked transactions state is >= SENT_TO_BABYLON
	UnbondingTxData            *UnbondingTxData `protobuf:"bytes,12,opt,name=unbonding_tx_data,json=unbondingTxData,proto3" json:"unbonding_tx_data,omitempty"`
	BabylonBTCDelegationTxHash string           `protobuf:"bytes,13,opt,name=babylonBTCDelegationTxHash,proto3" json:"babylonBTCDelegationTxHash,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *OldTrackedTransaction) Reset() {
	*x = OldTrackedTransaction{}
	mi := &file_old_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OldTrackedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldTrackedTransaction) ProtoMessage() {}

func (x *OldTrackedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_old_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldTrackedTransaction.ProtoReflect.Descriptor instead.
func (*OldTrackedTransaction) Descriptor() ([]byte, []int) {
	return file_old_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *OldTrackedTransaction) GetTrackedTransactionIdx() uint64 {
	if x != nil {
		return x.TrackedTransactionIdx
	}
	return 0
}

func (x *OldTrackedTransaction) GetStakingTransaction() []byte {
	if x != nil {
		return x.StakingTransaction
	}
	return nil
}

func (x *OldTrackedTransaction) GetStakingOutputIdx() uint32 {
	if x != nil {
		return x.StakingOutputIdx
	}
	return 0
}

func (x *OldTrackedTransaction) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *OldTrackedTransaction) GetStakingTime() uint32 {
	if x != nil {
		return x.StakingTime
	}
	return 0
}

func (x *OldTrackedTransaction) GetFinalityProvidersBtcPks() [][]byte {
	if x != nil {
		return x.FinalityProvidersBtcPks
	}
	return nil
}

func (x *OldTrackedTransaction) GetStakingTxBtcConfirmationInfo() *BTCConfirmationInfo {
	if x != nil {
		return x.StakingTxBtcConfirmationInfo
	}
	return nil
}

func (x *OldTrackedTransaction) GetBtcSigType() uint32 {
	if x != nil {
		return x.BtcSigType
	}
	return 0
}

func (x *OldTrackedTransaction) GetBtcSigOverBbnStakerAddr() []byte {
	if x != nil {
		return x.BtcSigOverBbnStakerAddr
	}
	return nil
}

func (x *OldTrackedTransaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_SENT_TO_BTC
}

func (x *OldTrackedTransaction) GetWatched() bool {
	if x != nil {
		return x.Watched
	}
	return false
}

func (x *OldTrackedTransaction) GetUnbondingTxData() *UnbondingTxData {
	if x != nil {
		return x.UnbondingTxData
	}
	return nil
}

func (x *OldTrackedTransaction) GetBabylonBTCDelegationTxHash() string {
	if x != nil {
		return x.BabylonBTCDelegationTxHash
	}
	return ""
}

var File_old_transaction_proto protoreflect.FileDescriptor

const file_old_transaction_proto_rawDesc = "" +
	"\n" +
	"\x15old_transaction.proto\x12\x05proto\"\xbf\x03\n" +
	"\rWatchedTxData\x121\n" +
	"\x14slashing_transaction\x18\x01 \x01(\fR\x13slashingTransaction\x128\n" +
	"\x18slashing_transaction_sig\x18\x02 \x01(\fR\x16slashingTransactionSig\x12.\n" +
	"\x13staker_babylon_addr\x18\x03 \x01(\tR\x11stakerBabylonAddr\x12\"\n" +
	"\rstaker_btc_pk\x18\x04 \x01(\fR\vstakerBtcPk\x123\n" +
	"\x15unbonding_transaction\x18\x05 \x01(\fR\x14unbondingTransaction\x12D\n" +
	"\x1eslashing_unbonding_transaction\x18\x06 \x01(\fR\x1cslashingUnbondingTransaction\x12K\n" +
	"\"slashing_unbonding_transaction_sig\x18\a \x01(\fR\x1fslashingUnbondingTransactionSig\x12%\n" +
	"\x0eunbonding_time\x18\b \x01(\rR\runbondingTime\"W\n" +
	"\x13BTCConfirmationInfo\x12!\n" +
	"\fblock_height\x18\x01 \x01(\rR\vblockHeight\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\fR\tblockHash\"_\n" +
	"\vCovenantSig\x12!\n" +
	"\fcovenant_sig\x18\x01 \x01(\fR\vcovenantSig\x12-\n" +
	"\x13covenant_sig_btc_pk\x18\x02 \x01(\fR\x10covenantSigBtcPk\"\x9a\x02\n" +
	"\x0fUnbondingTxData\x123\n" +
	"\x15unbonding_transaction\x18\x01 \x01(\fR\x14unbondingTransaction\x12%\n" +
	"\x0eunbonding_time\x18\x02 \x01(\rR\runbondingTime\x12C\n" +
	"\x13covenant_signatures\x18\x03 \x03(\v2\x12.proto.CovenantSigR\x12covenantSignatures\x12f\n" +
	"\"unbonding_tx_btc_confirmation_info\x18\x04 \x01(\v2\x1a.proto.BTCConfirmationInfoR\x1eunbondingTxBtcConfirmationInfo\"\xc7\x05\n" +
	"\x15OldTrackedTransaction\x126\n" +
	"\x17tracked_transaction_idx\x18\x01 \x01(\x04R\x15trackedTransactionIdx\x12/\n" +
	"\x13staking_transaction\x18\x02 \x01(\fR\x12stakingTransaction\x12,\n" +
	"\x12staking_output_idx\x18\x03 \x01(\rR\x10stakingOutputIdx\x12%\n" +
	"\x0estaker_address\x18\x04 \x01(\tR\rstakerAddress\x12!\n" +
	"\fstaking_time\x18\x05 \x01(\rR\vstakingTime\x12;\n" +
	"\x1afinality_providers_btc_pks\x18\x06 \x03(\fR\x17finalityProvidersBtcPks\x12b\n" +
	" staking_tx_btc_confirmation_info\x18\a \x01(\v2\x1a.proto.BTCConfirmationInfoR\x1cstakingTxBtcConfirmationInfo\x12 \n" +
	"\fbtc_sig_type\x18\b \x01(\rR\n" +
	"btcSigType\x12=\n" +
	"\x1cbtc_sig_over_bbn_staker_addr\x18\t \x01(\fR\x17btcSigOverBbnStakerAddr\x12-\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\x17.proto.TransactionStateR\x05state\x12\x18\n" +
	"\awatched\x18\v \x01(\bR\awatched\x12B\n" +
	"\x11unbonding_tx_data\x18\f \x01(\v2\x16.proto.UnbondingTxDataR\x0funbondingTxData\x12>\n" +
	"\x1ababylonBTCDelegationTxHash\x18\r \x01(\tR\x1ababylonBTCDelegationTxHash*\xa5\x01\n" +
	"\x10TransactionState\x12\x0f\n" +
	"\vSENT_TO_BTC\x10\x00\x12\x14\n" +
	"\x10CONFIRMED_ON_BTC\x10\x01\x12\x13\n" +
	"\x0fSENT_TO_BABYLON\x10\x02\x12\f\n" +
	"\bVERIFIED\x10\x03\x12\x15\n" +
	"\x11DELEGATION_ACTIVE\x10\x04\x12\x1e\n" +
	"\x1aUNBONDING_CONFIRMED_ON_BTC\x10\x05\x12\x10\n" +
	"\fSPENT_ON_BTC\x10\x06B,Z*github.com/babylonlabs-io/btc-staker/protob\x06proto3"

var (
	file_old_transaction_proto_rawDescOnce sync.Once
	file_old_transaction_proto_rawDescData []byte
)

func file_old_transaction_proto_rawDescGZIP() []byte {
	file_old_transaction_proto_rawDescOnce.Do(func() {
		file_old_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_old_transaction_proto_rawDesc), len(file_old_transaction_proto_rawDesc)))
	})
	return file_old_transaction_proto_rawDescData
}

var file_old_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_old_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_old_transaction_proto_goTypes = []any{
	(TransactionState)(0),         // 0: proto.TransactionState
	(*WatchedTxData)(nil),         // 1: proto.WatchedTxData
	(*BTCConfirmationInfo)(nil),   // 2: proto.BTCConfirmationInfo
	(*CovenantSig)(nil),           // 3: proto.CovenantSig
	(*UnbondingTxData)(nil),       // 4: proto.UnbondingTxData
	(*OldTrackedTransaction)(nil), // 5: proto.OldTrackedTransaction
}
var file_old_transaction_proto_depIdxs = []int32{
	3, // 0: proto.UnbondingTxData.covenant_signatures:type_name -> proto.CovenantSig
	2, // 1: proto.UnbondingTxData.unbonding_tx_btc_confirmation_info:type_name -> proto.BTCConfirmationInfo
	2, // 2: proto.OldTrackedTransaction.staking_tx_btc_confirmation_info:type_name -> proto.BTCConfirmationInfo
	0, // 3: proto.OldTrackedTransaction.state:type_name -> proto.TransactionState
	4, // 4: proto.OldTrackedTransaction.unbonding_tx_data:type_name -> proto.UnbondingTxData
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_old_transaction_proto_init() }
func file_old_transaction_proto_init() {
	if File_old_transaction_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_old_transaction_proto_rawDesc), len(file_old_transaction_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_old_transaction_proto_goTypes,
		DependencyIndexes: file_old_transaction_proto_depIdxs,
		EnumInfos:         file_old_transaction_proto_enumTypes,
		MessageInfos:      file_old_transaction_proto_msgTypes,
	}.Build()
	File_old_transaction_proto = out.File
	file_old_transaction_proto_goTypes = nil
	file_old_transaction_proto_depIdxs = nil
}
